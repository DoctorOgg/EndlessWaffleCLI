#!/usr/bin/env ruby

require "bundler/setup"
require "EndlessWaffleCLI"
require 'json'
require 'getoptlong'
require 'console_table'

query = {}
updateCache = false
showJSON = false

if ENV['EndlessWaffleURL'].nil?
  puts "EndlessWaffleCLI requires the 'EndlessWaffleURL' environment variable to be set."
  exit 1
else
  EndlessWaffleCLI.setServer ENV['EndlessWaffleURL']
end

if ENV['EndlessWaffleToken'].nil?
  puts "EndlessWaffleCLI requires the 'EndlessWaffleToken' environment variable to be set."
  exit 1
else
  EndlessWaffleCLI.setToken ENV['EndlessWaffleToken']
end

def showHelp
  puts
  puts "Endless Waffle AMI"
	puts "Usage example: #{$0} -a us-east-1c"
	puts
	puts "Options:"
	puts "-a or --availability_zone".ljust(30)   +"-> Specifiy Availability Aone"
	puts "-n or --name".ljust(30)                +"-> Specifiy Name"
  puts "-i or --instance_type".ljust(30)       +"-> Specify instance type"
  puts "-b or --version".ljust(30)             +"-> Specify version"
  puts "-r or --release".ljust(30)             +"-> Specify release"
  puts "-q or --ami_id".ljust(30)              +"-> Specify amiid"
  puts "-j or --json".ljust(30)                +"-> Raw JSON output"
	puts "-c or --cache ".ljust(30)              +"-> Update local Cache database with current AWS data"
  puts "-h or --help".ljust(30)                +"-> Show this help message."
	puts
end

parser = GetoptLong.new
parser.set_options(["-a", "--availability_zone", GetoptLong::NO_ARGUMENT],
                   ["-n", "--name", GetoptLong::NO_ARGUMENT],
                   ["-i", "--instance_type", GetoptLong::NO_ARGUMENT],
                   ["-v", "--version", GetoptLong::NO_ARGUMENT],
                   ["-r", "--release", GetoptLong::NO_ARGUMENT],
                   ["-q", "--ami_id", GetoptLong::NO_ARGUMENT],
                   ["-j", "--json", GetoptLong::NO_ARGUMENT],
                   ["-c", "--cache", GetoptLong::NO_ARGUMENT],
                   ["-h", "--help", GetoptLong::NO_ARGUMENT]
                   )

begin
	begin
		opt,arg = parser.get_option
		break if not opt
		case opt
			when "-h" || "--help"
				showHelp
				exit
			when "-a" || "--availability_zone"
				query.store(:availability_zone,  ARGV[0])
      when "-n" || "--name"
        query.store(:name,  ARGV[0])
      when "-i" || "--instance_type"
        query.store(:instance_type,  ARGV[0])
      when "-v" || "--version"
        query.store(:version,  ARGV[0])
      when "-q" || "--ami_id"
        query.store(:ami_id,  ARGV[0])
      when "-j" || "--json"
        showJSON = true
			when "-c" || "--cache"
				updateCache = true
			end
		rescue => err
			puts "#{err.class()}: #{err.message}"
			exit 1
	end
end while 1

def showTable(result)
  table_config = [
     {:key=>:name, :size=>9, :title=>"Name"},
     {:key=>:version, :size=>10, :title=>"Version"},
     {:key=>:release, :size=>10, :title=>"Release"},
     {:key=>:availability_zone, :size=>17, :title=>"Zone"},
     {:key=>:arch, :size=>7, :title=>"Arch"},
     {:key=>:instance_type, :size=>18, :title=>"Instance Type"},
     {:key=>:ami_id, :size=>15, :title=>"AMI"},
     {:key=>:aki_id, :size=>15, :title=>"AKI"}

  ]
  ConsoleTable.define(table_config) do |table|
      result.each do |r|
        table << [
          r["name"],
          r["version"],
          r["release"],
          r["availability_zone"],
          r["arch"],
          r["instance_type"],
          r["ami_id"],
          r["aki_id"]
        ]
      end
  end
end

def showJSON(result)
  puts JSON.pretty_generate(result)
end

if updateCache == true
  puts "Running Cache Update:"
  puts EndlessWaffleCLI.updateAmi
end

result = EndlessWaffleCLI.queryAmi query

if showJSON == false
  showTable result
else
  showJSON result
end

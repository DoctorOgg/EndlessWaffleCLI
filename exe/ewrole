#!/usr/bin/env ruby

require "bundler/setup"
require "EndlessWaffleCLI"
require 'json'
require 'getoptlong'
require 'console_table'
require 'colorize'

if ENV['EndlessWaffleURL'].nil?
  puts "EndlessWaffleCLI requires the 'EndlessWaffleURL' environment variable to be set."
  exit 1
else
  EndlessWaffleCLI.setServer ENV['EndlessWaffleURL']
end

if ENV['EndlessWaffleToken'].nil?
  puts "EndlessWaffleCLI requires the 'EndlessWaffleToken' environment variable to be set."
  exit 1
else
  EndlessWaffleCLI.setToken ENV['EndlessWaffleToken']
end

def showHelp
  puts
  puts "Endless Waffle Roles"
	puts "Usage example: #{$0} -c myNewRole"
	puts
	puts "Options:"
	puts "-c or --create".ljust(30)              +"-> Create new role"
  puts "-l or --list".ljust(30)                +"-> List Roles"
  puts "-d or --delete".ljust(30)              +"-> Delete Role"
  puts "-e or --edit ".ljust(30)               +"-> Edit role"
  puts "-s or --show ".ljust(30)               +"-> Show Role"
  puts "-h or --help".ljust(30)                +"-> Show this help message."
	puts
end

def showRole(name)
  puts JSON.pretty_generate(EndlessWaffleCLI.showRole name)
end

def createRole(name)
  puts JSON.pretty_generate(EndlessWaffleCLI.createRole name)
end

def deleteRole(name)
  print "Are you Sure you want to delete role #{name}  (y/n): ".colorize(:red)
  response = STDIN.gets.chomp
  if response == 'y'
    puts EndlessWaffleCLI.deleteRole(name)
  else
    puts "Stopping request."
  end
end

def editRole(name)
  orignial = JSON.pretty_generate(EndlessWaffleCLI.showRole name)
  tmp_file="/tmp/ewrole-edit-#{name}-#{$$}.json"
  File.open(tmp_file,"w") do |f|
    f.write(orignial)
  end
  if ENV['EDITOR'].nil?
    puts "I can not continue, please set your EDITOR enviroment variable"
    exit 1
  end
  system "$EDITOR #{tmp_file}"
  edited = File.read(tmp_file)
  FileUtils.rm tmp_file

  begin
    edited = JSON.parse(edited)
  rescue JSON::ParserError => e
    puts "Sorry you give me invalid JSON, try again!".colorize(:red)
    exit 1
  end
  puts EndlessWaffleCLI.updateRole edited
end

def listRoles(name)
  query = {"query"=>{"name"=>name}}
  result = EndlessWaffleCLI.listRoles query
  table_config = [
     {:key=>:name, :size=>15, :title=>"Name"},
     {:key=>:created_at, :size=>30, :title=>"Created"},
     {:key=>:updated_at, :size=>30, :title=>"Updated"}
  ]
  ConsoleTable.define(table_config) do |table|
      result.each do |r|
        table << [
          r["name"],
          r["created_at"],
          r["updated_at"]
        ]
      end
  end
end

parser = GetoptLong.new
parser.set_options(["-c", "--create", GetoptLong::NO_ARGUMENT],
                   ["-l", "--list", GetoptLong::NO_ARGUMENT],
                   ["-d", "--delete", GetoptLong::NO_ARGUMENT],
                   ["-e", "--edit", GetoptLong::NO_ARGUMENT],
                   ["-s", "--show", GetoptLong::NO_ARGUMENT],
                   ["-h", "--help", GetoptLong::NO_ARGUMENT]
                   )

begin
	begin
		opt,arg = parser.get_option
		break if not opt
		case opt
			when "-h" || "--help"
				showHelp; exit
      when "-c" || "--create"
        createRole  ARGV[0]; exit
      when "-l" || "--list"
        listRoles ARGV[0]; exit
      when "-d" || "--delete"
        deleteRole  ARGV[0]; exit
      when "-e" || "--edit"
        editRole ARGV[0]; exit
			when "-s" || "--show"
				showRole ARGV[0]; exit
			end
		rescue => err
			puts "#{err.class()}: #{err.message}"
			exit 1
	end
end while 1

#!/usr/bin/env ruby

require "bundler/setup"
require "EndlessWaffleCLI"
require 'json'
require 'getoptlong'
require 'console_table'
require 'colorize'

query = {}
updateCache = false
showJSON = false

if ENV['EndlessWaffleURL'].nil?
  puts "EndlessWaffleCLI requires the 'EndlessWaffleURL' environment variable to be set."
  exit 1
else
  EndlessWaffleCLI.setServer ENV['EndlessWaffleURL']
end

if ENV['EndlessWaffleToken'].nil?
  puts "EndlessWaffleCLI requires the 'EndlessWaffleToken' environment variable to be set."
  exit 1
else
  EndlessWaffleCLI.setToken ENV['EndlessWaffleToken']
end

def colorizeState(state)
  if state > 0
    state.to_s.colorize(:green)
  else
    state.to_s.colorize(:red)
  end
end

def showHelp
  puts
  puts "Endless Waffle Subnets"
	puts "Usage example: #{$0} -a us-east-1c"
	puts
	puts "Options:"
	puts "-m or --monochrome".ljust(30)          +"-> Show results in monochrome"
	puts "-a or --availability_zone".ljust(30)   +"-> Specifiy Availability Aone"
	puts "-v or --vpc_id".ljust(30)              +"-> Specifiy vpc_id"
  puts "-s or --subnet_id".ljust(30)           +"-> Specify subnet_id"
  puts "-j or --json".ljust(30)                +"-> Raw JSON output"
	puts "-c or --cache ".ljust(30)              +"-> Update local Cache database with current AWS data"
  puts "-h or --help".ljust(30)                +"-> Show this help message."
	puts
end

parser = GetoptLong.new
parser.set_options(["-m", "--monochrome", GetoptLong::NO_ARGUMENT],
                   ["-a", "--availability_zone", GetoptLong::NO_ARGUMENT],
                   ["-v", "--vpc_id", GetoptLong::NO_ARGUMENT],
                   ["-s", "--subnet_id", GetoptLong::NO_ARGUMENT],
                   ["-j", "--json", GetoptLong::NO_ARGUMENT],
                   ["-c", "--cache", GetoptLong::NO_ARGUMENT],
                   ["-h", "--help", GetoptLong::NO_ARGUMENT]
                   )

begin
	begin
		opt,arg = parser.get_option
		break if not opt
		case opt
			when "-h" || "--help"
				showHelp
				exit
			when "-m" || "--monochrome"
        String.disable_colorization = true
			when "-a" || "--availability_zone"
				query.store(:availability_zone,  ARGV[0])
      when "-v" || "--vpc_id"
        query.store(:vpc_id,  ARGV[0])
      when "-s" || "--subnet_id"
        query.store(:subnet_id,  ARGV[0])
      when "-j" || "--json"
        showJSON = true
			when "-c" || "--cache"
				updateCache = true
			end
		rescue => err
			puts "#{err.class()}: #{err.message}"
			exit 1
	end
end while 1

def showTable(result)
  table_config = [
     {:key=>:subnet_id, :size=>13, :title=>"Subnet Id"},
     {:key=>:state, :size=>9, :title=>"State"},
     {:key=>:vpc_id, :size=>8, :title=>"VPC"},
     {:key=>:cidr_block, :size=>8, :title=>"CIDR"},
     {:key=>:available_ip_address_count, :size=>10, :title=>"Available ip's"},
     {:key=>:availability_zone, :size=>12, :title=>"Zone"},
     {:key=>:map_public_ip_on_launch, :size=>12, :title=>"Map Public ip"}
  ]
  ConsoleTable.define(table_config) do |table|
      result.each do |r|
        table << [
          r["subnet_id"].colorize(:yellow),
          r["state"],
          r["vpc_id"],
          r["cidr_block"],
          colorizeState(r["available_ip_address_count"]),
          r["availability_zone"],
          r["map_public_ip_on_launch"]
      end
  end
end

def showJSON(result)
  puts JSON.pretty_generate(result)
end

if updateCache == true
  puts "Running Cache Update:"
  puts EndlessWaffleCLI.updateSubnets
end

result = EndlessWaffleCLI.querySubnets query

if showJSON == false
  showTable result
else
  showJSON result
end

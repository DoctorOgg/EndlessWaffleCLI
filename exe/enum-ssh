#!/usr/bin/env ruby

require "bundler/setup"
require "EndlessWaffleCLI"
require 'getoptlong'
require 'net/ssh/multi'

query = {}
runCommand = nil
username = ENV['USER']
promptPassword=false

if ENV['EndlessWaffleURL'].nil?
  puts "EndlessWaffleCLI requires the 'EndlessWaffleURL' environment variable to be set."
  exit 1
else
  EndlessWaffleCLI.setServer ENV['EndlessWaffleURL']
end

if ENV['EndlessWaffleToken'].nil?
  puts "EndlessWaffleCLI requires the 'EndlessWaffleToken' environment variable to be set."
  exit 1
else
  EndlessWaffleCLI.setToken ENV['EndlessWaffleToken']
end

def colorizeState(state)
  if state == "running"
    state.colorize(:green)
  else
    state.colorize(:red)
  end
end

def showHelp
  puts
  puts "Endless Waffle Enumerate SSH"
	puts "Usage example: #{$0} -e dev1 -r frontend -c 'uptime' "
	puts
	puts "Options:"
	puts "-e or --environment".ljust(30)         +"-> Specifiy environment"
	puts "-r or --role".ljust(30)                +"-> Specifiy role"
  puts "-c or --command".ljust(30)             +"-> Specifiy command"
  puts "-u or --username".ljust(30)            +"-> Specifiy username"
  puts "-p or --password".ljust(30)            +"-> Prompt for password"
  puts "-h or --help".ljust(30)                +"-> Show this help message."
	puts
end

parser = GetoptLong.new
parser.set_options(["-e", "--environment", GetoptLong::NO_ARGUMENT],
                   ["-r", "--role", GetoptLong::NO_ARGUMENT],
                   ["-c", "--command", GetoptLong::NO_ARGUMENT],
                   ["-h", "--help", GetoptLong::NO_ARGUMENT],
                   ["-p", "--password", GetoptLong::NO_ARGUMENT]
                   )

begin
	begin
		opt,arg = parser.get_option
		break if not opt
		case opt
			when "-h" || "--help"
				showHelp
				exit
			when "-e" || "--environment"
				query.store(:environment,  ARGV[0])
      when "-r" || "--role"
        query.store(:role,  ARGV[0])
			when "-c" || "--command"
				runCommand  = ARGV[0]
      when "-u" || "--username"
        username  = ARGV[0]
      when "-p" || "--password"
        promptPassword = true
			end
		rescue => err
			puts "#{err.class()}: #{err.message}"
			exit 1
	end
end while 1

def ssh_using_key(command,query,username)
  Net::SSH::Multi.start(:on_error => :warn) do |session|
    list = EndlessWaffleCLI.queryEc2 query
    list.each do |machine|
      session.use "#{username}@#{machine['dnsName']}"
    end
    session.exec command
  end
end

def ssh_runthis(command,host,user,password)
  Net::SSH.start(host, user, :password => password) do |ssh|
    output = ssh.exec!(command)
    puts "[#{host}] #{output}"
  end
end

def ssh_using_password(command,query,username,password)
  list = EndlessWaffleCLI.queryEc2 query
  list.each do |machine|
    ssh_runthis(command,machine['dnsName'],username,password)
  end
end

if query[:environment].nil?
  puts "You need to sepecify a environment"
  exit 1
end

if runCommand.nil?
  puts "You need to sepecify a command to run"
  exit 1
end

if promptPassword
  print "Password for #{username}: "
  password=STDIN.noecho(&:gets).chomp
  puts ""
  ssh_using_password(runCommand,query,username,password)
else
  ssh_using_key(runCommand,query,username)
end
